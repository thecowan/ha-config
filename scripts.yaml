sonos_say:
  alias: Sonos TTS script
  sequence:
  - service: sonos.snapshot
    data_template:
      entity_id: '{{ sonos_entity }}'
  - service: media_player.unjoin
    data_template:
      entity_id: '{{ sonos_entity }}'
  - service: media_player.volume_set
    data_template:
      entity_id: '{{ sonos_entity }}'
      volume_level: '{{ volume }}'
  - service: tts.google_say
    data_template:
      entity_id: '{{ sonos_entity }}'
      message: '{{ message }}'
  - delay: '{{ delay }}'
  - service: sonos.restore
    data_template:
      entity_id: '{{ sonos_entity }}'
sonos_get_home:
  alias: Sonos Get Home
  sequence:
  - service: script.sonos_join_all
  - service: script.sonos_play_matching
    data_template:
      entity_id: media_player.office
      match: \U0001F3E0
sonos_romance:
  alias: Sonos Romantic Music
  sequence:
  - service: script.sonos_join_all
  - service: script.sonos_play_matching
    data_template:
      entity_id: media_player.office
      match: \U0001F49C
sonos_sleep:
  alias: Sonos Sleep Music
  sequence:
  - service: media_player.unjoin
    data:
      entity_id: media_player.master_bedroom
  - service: media_player.volume_set
    data:
      volume_level: 0.05
    target:
      entity_id: media_player.master_bedroom
  - service: media_player.shuffle_set
    data:
      entity_id: media_player.master_bedroom
      shuffle: true
  - service: script.sonos_play_matching
    data:
      entity_id: media_player.master_bedroom
      match: "\U0001F4A4"
  mode: single
sonos_play_non_matching:
  alias: Sonos Play Non-Matching
  description: Randomly choose and play a Sonos favourite which does NOT contain a
    particular character
  fields:
    entity_id:
      name: Entity ID
      description: The device to target
      example: media_player.office
      required: true
      selector:
        entity:
          integration: sonos
          domain: media_player
    match:
      name: Match String
      description: The string to avoid
      example: Home
      required: true
      selector:
        text:
  sequence:
  - service: media_player.play_media
    data:
      entity_id: '{{ entity_id }}'
      media_content_type: favorite_item_id
      media_content_id: '{{ state_attr("sensor.sonos_favorites", "items") | discard_values(match)
        | random_entry | first }}'
  mode: single
sonos_play_matching:
  alias: Sonos Play Matching
  description: Randomly choose and play a Sonos favourite containing a particular
    character
  fields:
    entity_id:
      name: Entity ID
      description: The device to target
      example: media_player.office
      required: true
      selector:
        entity:
          integration: sonos
          domain: media_player
    match:
      name: Match String
      description: The string to match
      example: Home
      required: true
      selector:
        text:
  sequence:
  - service: media_player.play_media
    data:
      entity_id: '{{ entity_id }}'
      media_content_type: favorite_item_id
      media_content_id: '{{ state_attr("sensor.sonos_favorites", "items") | keep_values(match)
        | random_entry | first }}'
  mode: single
sonos_join_all:
  alias: Sonos Join All
  sequence:
  - service: media_player.join
    data:
      entity_id: media_player.office
      group_members:
      - media_player.kitchen
      - media_player.master_bedroom
      - media_player.guest_room
sonos_ungroup_and_play:
  alias: Sonos Ungroup & Play
  sequence:
  - service: media_player.unjoin
    data_template:
      entity_id: '{{ sonos_entity }}'
  - service: media_player.volume_set
    data_template:
      entity_id: '{{ sonos_entity }}'
      volume_level: '{{ volume }}'
  - service: media_player.select_source
    data_template:
      entity_id: '{{ sonos_entity }}'
      source: '{{ source_name }}'
shower_paul:
  alias: 'Shower: Paul'
  sequence:
  - data:
      sonos_entity: media_player.bathroom
      source_name: "I'm feeling lucky (Paul) \U0001F3E0\U0001F6BF"
      volume: 0.5
    service: script.sonos_ungroup_and_play
pause_all_sonos:
  alias: Pause All Sonos
  sequence:
  - service: media_player.media_pause
    data:
      entity_id: group.all_sonos
pause_all_media:
  alias: Pause All Media
  sequence:
  - service: media_player.media_pause
    data:
      entity_id: all
set_cat_flap_state:
  alias: Set Cat Flap State
  fields:
    target_state:
      name: Target State
      required: true
      description: The aggregate state of the cat flap (all_locked, all_unlocked,
        keep_inside, keep_outside, keep_in_bedroom, keep_in_office)
      example: keep_in_bedroom
  sequence:
  - service: system_log.write
    data:
      message: Bedroom to {% if target_state in ["all_locked"] -%} locked_all {%-
        elif target_state in ["all_unlocked"] -%} unlocked {%- elif target_state in
        ["keep_outside", "keep_in_office"] -%} locked_out {%- elif target_state in
        ["keep_inside", "keep_in_bedroom"] -%} locked_in {%- else -%} ??? {%- endif
        %}
  - service: sureha.set_lock_state
    data:
      flap_id: 675555
      lock_state: '{% if target_state in ["all_locked"] -%} locked_all {%- elif target_state
        in ["all_unlocked"] -%} unlocked {%- elif target_state in ["keep_outside",
        "keep_in_office"] -%} locked_out {%- elif target_state in ["keep_inside",
        "keep_in_bedroom"] -%} locked_in {%- else -%} ??? {%- endif %}'
  - service: sureha.set_lock_state
    data:
      flap_id: 671120
      lock_state: '{% if target_state in ["all_locked"] -%} locked_all {%- elif target_state
        in ["all_unlocked"] -%} unlocked {%- elif target_state in ["keep_outside",
        "keep_in_bedroom"] -%} locked_out {%- elif target_state in ["keep_inside",
        "keep_in_office"] -%} locked_in {%- else -%} ??? {%- endif %}'
  mode: single
  icon: mdi:cat
  description: Bulk set cat flap state
red_wake:
  alias: red - Wake
  sequence:
  - service: wake_on_lan.send_magic_packet
    data:
      mac: 70:85:C2:63:9F:11
red_shutdown:
  alias: red - Shutdown
  sequence:
  - service: mqtt.publish
    data:
      topic: iotlink/workgroup/red/commands/shutdown
      payload: ''
red_suspend:
  alias: red - Suspend
  sequence:
  - service: mqtt.publish
    data:
      topic: iotlink/workgroup/red/commands/suspend
      payload: ''
red_hibernate:
  alias: red - Hibernate
  sequence:
  - service: mqtt.publish
    data:
      topic: iotlink/workgroup/red/commands/hibernate
      payload: ''
red_reboot:
  alias: red - Reboot
  sequence:
  - service: mqtt.publish
    data:
      topic: iotlink/workgroup/red/commands/reboot
      payload: ''
red_lock:
  alias: red - Lock
  sequence:
  - service: mqtt.publish
    data:
      topic: iotlink/workgroup/red/commands/lock
      payload: ''
red_logoff:
  alias: red - Logoff
  sequence:
  - service: mqtt.publish
    data:
      topic: iotlink/workgroup/red/commands/logoff
      payload: ''
red_vol_mute:
  alias: red - Toggle Mute
  sequence:
  - service: mqtt.publish
    data:
      topic: iotlink/workgroup/red/commands/volume/mute
      payload: ''
red_vol_max:
  alias: red - Vol Max
  sequence:
  - service: mqtt.publish
    data:
      topic: iotlink/workgroup/red/commands/volume/set
      payload: '100'
red_displays_on:
  alias: red - Displays ON
  sequence:
  - service: mqtt.publish
    data:
      topic: iotlink/workgroup/red/commands/displays/on
      payload: ''
red_displays_off:
  alias: red - Displays OFF
  sequence:
  - service: mqtt.publish
    data:
      topic: iotlink/workgroup/red/commands/displays/off
      payload: ''
red_refresh:
  alias: red - Refresh
  sequence:
  - service: mqtt.publish
    data:
      topic: iotlink/workgroup/red/refresh
      payload: ''
red_notify:
  alias: red - Notify
  sequence:
  - service: mqtt.publish
    data:
      topic: iotlink/workgroup/red/commands/notify
      payload: '{ "title": "My Notification Title", "message": "This is an example
        of notification using IOT Link", "launchParams": "toast://open/https://iotlink.gitlab.io"
        }'
red_run_chrome:
  alias: red - Run Chrome
  sequence:
  - service: mqtt.publish
    data:
      topic: iotlink/workgroup/red/commands/run
      payload: '{ "command": "C:\\Program Files (x86)\\Google\\Chrome\\Application\\chrome.exe",
        "args": "https://iotlink.gitlab.io", "path": "C:\\Program Files (x86)\\Google\\Chrome\\Application",
        "user": "", "visible": true, "fallback": true }'
toggle_ac_state:
  alias: Toggle AC State
  fields:
    entity_id:
      name: Entity ID
      description: The climate device to target
      example: climate.daikin_living_room
      required: true
      selector:
        entity:
          domain: climate
  sequence:
  - if:
    - condition: template
      value_template: '{{ states(entity_id) == "off" }}'
    then:
    - service: climate.set_hvac_mode
      data:
        hvac_mode: '{{ states(''input_text.daikin_ac_last_active_mode'') }}'
      target:
        entity_id: '{{ entity_id }}'
    else:
    - service: climate.set_hvac_mode
      data:
        hvac_mode: 'off'
      target:
        entity_id: '{{ entity_id }}'
  mode: single
  icon: mdi:hvac
paul_sleep:
  alias: Paul Sleep
  sequence:
  - service: light.turn_off
    data: {}
    target:
      area_id: master_bedroom
  - service: script.sonos_sleep
    data: {}
  mode: single
  icon: mdi:bed-clock
activate_z2m_siren:
  alias: Activate Zigbee2MQTT Siren
  fields:
    siren_entity:
      name: Siren Entity
      description: Main siren entity
      example: switch.siren_1_alarm
      required: true
      selector:
        entity:
          integration: mqtt
          domain: switch
    volume_entity:
      name: Volume Entity
      description: Entity to use to control volume
      example: select.siren_1_volume
      required: true
      selector:
        entity:
          integration: mqtt
          domain: select
    melody_entity:
      name: Melody Entity
      description: Entity to use to control melody
      example: select.siren_1_melody
      required: true
      selector:
        entity:
          integration: mqtt
          domain: select
    duration_entity:
      name: Duration Entity
      description: Entity to use to control duration
      example: number.siren_1_duration
      required: true
      selector:
        entity:
          integration: mqtt
          domain: number
    volume:
      name: Volume
      description: Volume to use ("low", "medium", or "high")
      example: low
      required: true
      selector:
        state:
          entity_id: select.siren_1_volume
    melody_id:
      name: Melody ID
      description: Melody ID (1-18)
      example: 4
      required: true
      selector:
        number:
          min: 1
          max: 18
    duration:
      name: Duration
      description: Alarm duration in seconds
      example: 5
      required: true
      selector:
        number:
          min: 1
          max: 90
  mode: single
  icon: mdi:alarm-bell
  sequence:
  - service: number.set_value
    data:
      value: '{{ duration }}'
    target:
      entity_id: '{{ duration_entity }}'
  - service: select.select_option
    data:
      option: '{{ melody_id }}'
    target:
      entity_id: '{{ melody_entity }}'
  - service: select.select_option
    data:
      option: '{{ volume }}'
    target:
      entity_id: '{{ volume_entity }}'
  - service: switch.turn_on
    data: {}
    target:
      entity_id: '{{ siren_entity }}'
publish_flight_info:
  alias: Publish Flight Info
  sequence:
  - service: mqtt.publish
    data:
      qos: 0
      retain: false
      topic: awtrix_d69578/custom/flight
      payload: '{%- set flight = state_attr(''sensor.gobo_closest_aircraft'', ''flight_number'')
        | default("??????") | trim -%} {%- set airline = flight | regex_findall_index(find=''^[A-Za-z]+'')
        -%} {%- set flnum = flight | regex_replace(find=''^[A-Za-z]+'', replace='''')
        -%} {"text": [{"t": "{{ airline }}", "c": "#ff0000"},{"t": "{{ flnum }}"}],
        "progress": 20}'
  - service: mqtt.publish
    data:
      qos: 0
      retain: false
      topic: awtrix_d69578/custom/ports
      payload: '{"text": [ {"t": "{{ state_attr(''sensor.gobo_closest_aircraft'',
        ''route'')[''FromIata''] | default(state_attr(''sensor.gobo_closest_aircraft'',
        ''route'')[''FromIcao'']) | default("???") | trim }}" }, {"t": ">", "c": "#101010"},  {"t":
        "{{ state_attr(''sensor.gobo_closest_aircraft'', ''route'')[''ToIata''] |
        default(state_attr(''sensor.gobo_closest_aircraft'',''route'')[''ToIcao''])
        | default("???") | trim }}"} ], "progress": 40}'
  - service: mqtt.publish
    data:
      qos: 0
      retain: false
      topic: awtrix_d69578/custom/plane
      payload: '{"text": "{{ state_attr(''sensor.gobo_closest_aircraft'', ''type_code'')  |
        default("???") | trim }}", "progress": 60}'
  - service: mqtt.publish
    data:
      qos: 0
      retain: false
      topic: awtrix_d69578/custom/alt
      payload: '{"text": "{{ states(''sensor.gobo_closest_aircraft_barometric_altitude'')  |
        default(0) | float(0) | round(0)}}ft", "progress": 80, "icon": "{% if (state_attr(''sensor.gobo_closest_aircraft_barometric_altitude'',
        ''rate'') | int(0)) > 0 %}7465{% else %}7463{% endif %}"}'
  - service: mqtt.publish
    data:
      qos: 0
      retain: false
      topic: awtrix_d69578/custom/speed
      payload: "{\"text\": [\n {\"t\": \"{{ ((states('sensor.gobo_closest_aircraft_ground_speed')
        | default(0) | float(0) ) * 1.852) | round(0)}}\"},\n {\"t\": \"kmh\", \"c\":
        \"#101010\"}\n], \"progress\": 100}"
  - service: mqtt.publish
    data:
      qos: 0
      retain: false
      topic: awtrix_d69578/power
      payload: '1'
  mode: single
  icon: far:paper-plane
cycle_light_brightness_25_percent:
  alias: Cycle Light Brightness - 25 Percent
  description: Cycle light through 25/50/75/100 percent
  fields:
    entity_id:
      name: Entity ID
      description: The device to target
      example: light.dining_room
      required: true
      selector:
        entity:
          domain: light
  sequence:
  - service: light.turn_on
    data:
      entity_id: '{{ entity_id }}'
      brightness: '{% if is_state(entity_id, ''off'') %} 64 {% elif state_attr(entity_id,
        ''brightness'') | int < 60 %} 64 {% elif state_attr(entity_id, ''brightness'')
        | int < 124 %} 128 {% elif state_attr(entity_id, ''brightness'') | int < 190
        %} 192 {% elif state_attr(entity_id, ''brightness'') | int < 253 %} 255 {%
        else %} 64 {% endif %}'
  mode: single
  icon: mdi:lightbulb-multiple-outline
